Примітка: 	Створюючи коміти потрібно писати логічно зрозумілі меседжі!!!
			Всі команди повинні бути виконані використовуючи командну стрічку, за виключенням створення віддаленого репозиторію!!!

Потрібно залити на git дві ваші попередні домашні роботи, хто ще цього не зробив!!!

1. Створити папку проекту локально (ProgectGIT)
2. Проініціліазувати цю папку як гіт репозиторій
3. Сворити текстовий файл master.txt і закомітати його в локальний репозиторій
4. Поедітати існуюючий файл (додати певні стрічки коду), зберегти і закомітати в локальний репозиторій
5. Додати новий текстовий документ master_new.txt і закомітати його в локальний репозиторій
6. Зробити чекаут на попередній коміт і переглянути папку проекту на відсутність цього файлу
7. Зробити чекаут на останній коміт в бренчі
8. Створити нову бренчу develop і переключитись на неї
9. Додати новий файл develop.txt і зробити коміт
10. Поедітати доданий файл (додати певні стрічки коду) і зробити коміт (повторити цю операцію 4 рази)
11. Зробити squash над 4-ма останніми комітами, тобто повинен бути лише один 
	логічно зрозумілий коміт замість чотирьох
12. Поедітати файл master.txt (додати певні стрічки коду)і зробити коміт
13. Переключитись на бренчу master, поедітати файл master.txt (додати певні стрічки коду)і зробити коміт
14. Переключитись на бренчу develop
15. Змерджити бренчу develop в master
16. Сворити віддалений репозиторій на gitHub
17. Привязати віддалений репозиторій до локального репозиторію
18. Зробити push бренчі master на віддалений репозиторій (під час push можуть бути проблеми з налаштуванням прав юзера)
19. Зробити push бренчі develop на віддалений репозиторій
20. Видалити створену бренчу з локального репозиторію і перевірити що вона відсутня локально
21. Зробити fetch і переглянути кількість бренчей локально
22. Поекспериментувати з git rebase і проаналізувати історію комітів
23. Спробувати створити пулруквест і змерджити зміни за допомогою пул реквесту
